{"createdAt":"2025-09-16T20:26:39.227Z","updatedAt":"2025-09-29T19:25:47.000Z","id":"FWkAvzzQEbgcToMj","name":"CB - Notificaciones FortiSIEM Netsuite","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"minutes","minutesInterval":1}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-608,-112],"id":"d40f9993-29de-453a-b56f-c4a2c1c44f6a","name":"Schedule Trigger","disabled":true},{"parameters":{"method":"POST","url":"https://ifx-netsuite-experience-prd.us-e1.cloudhub.io/api/execute/post_script?script=2011&deploy=1","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"actionRest\": 5,\n    \"savedSearchID\":\"customsearch_ifx_soc_cases_frs\",\n    \"page\":1,\n    \"filters\": [],\n    \"pageSize\": 5\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-400,0],"id":"c6b1697f-dd42-406a-a73c-9818f9fd65e3","name":"HTTP Request"},{"parameters":{"jsCode":"// Function node — n8n\n// Mapea la respuesta JSON del endpoint, filtra para obtener el ticket más actualizado\n// basado en 'case.startdate', y lo formatea para un LLM.\n// Incluye una función para limpiar HTML y Base64 del campo 'message',\n// y una lógica para extraer un mensaje específico si el asunto es \"FortiSIEM\".\n\n// --- Helper Functions ---\nfunction parseDateString(dateStr) {\n  if (!dateStr || typeof dateStr !== 'string') return null;\n  try {\n    const parts = dateStr.match(/(\\d{2})\\/(\\d{2})\\/(\\d{4})\\s(\\d{1,2}):(\\d{2})\\s(AM|PM)/i);\n    if (parts) {\n      let [, month, day, year, hours, minutes, ampm] = parts;\n      hours = parseInt(hours, 10);\n      minutes = parseInt(minutes, 10);\n      if (ampm && ampm.toUpperCase() === 'PM' && hours < 12) hours += 12;\n      if (ampm && ampm.toUpperCase() === 'AM' && hours === 12) hours = 0;\n      const date = new Date(year, parseInt(month, 10) - 1, parseInt(day, 10), hours, minutes);\n      return isNaN(date.getTime()) ? null : date;\n    }\n    const d = new Date(dateStr);\n    return isNaN(d.getTime()) ? null : d;\n  } catch (e) {\n    console.error(\"Error parsing date string:\", dateStr, e);\n    return null;\n  }\n}\n\nconst getTextValue = (field) => {\n  if (field && Array.isArray(field) && field.length > 0 && field[0] && typeof field[0].text === 'string') {\n    return field[0].text;\n  }\n  return '';\n};\n\nfunction cleanHtmlAndBase64(htmlString) {\n  if (!htmlString || typeof htmlString !== 'string') return '';\n  let cleanedText = htmlString;\n  cleanedText = cleanedText.replace(/<[^>]*>/g, '');\n  cleanedText = cleanedText.replace(/\\b(?:[A-Za-z0-9+/]{4}){8,}(?:[A-Za-z0-9+/]{2}={2}|[A-Za-z0-9+/]{3}=)?\\b/g, '[ADJUNTO_REMOVIDO]');\n  cleanedText = cleanedText.replace(/data:[^;]+;base64,[A-Za-z0-9+/=]+/g, '[DATA_URI_REMOVIDA]');\n  cleanedText = cleanedText.replace(/(\\s*\\r?\\n\\s*){2,}/g, '\\n'); \n  cleanedText = cleanedText.replace(/[ \\t]+/g, ' ');\n  return cleanedText.trim();\n}\n\n// --- Main Script ---\nconst items = $input.all();\nconst allTickets = [];\n\nconst rawTicketsData = items[0].json.data; \nconst ticketsToProcess = Array.isArray(rawTicketsData) ? rawTicketsData : (rawTicketsData ? [rawTicketsData] : []);\n\nconst FORTISIEM_MESSAGE_START = \"The following Incident has triggered for the first time.\";\n\nfor (const itemData of ticketsToProcess) {\n  const record = itemData.values; \n\n  if (!record || typeof record !== 'object') {\n    console.warn(\"Skipping invalid itemData, no 'values' object found:\", itemData);\n    continue;\n  }\n\n  const fechaCreacionRaw = record['case.createddate'];\n  const fechaIncidenteRaw = record['case.startdate'];\n  const ticketSubject = record['subject'] || ''; // Capturamos el asunto para la lógica\n  let originalMessage = record['message'] || ''; // Capturamos el mensaje original\n\n  const fechaCreacionDate = parseDateString(fechaCreacionRaw);\n  const fechaIncidenteDate = parseDateString(fechaIncidenteRaw);\n  \n  let finalMessageForTicket = cleanHtmlAndBase64(originalMessage); // Limpiamos el mensaje por defecto\n\n  // === Lógica para FortiSIEM ===\n  if (ticketSubject.includes(\"FortiSIEM\")) {\n      const startIndex = finalMessageForTicket.indexOf(FORTISIEM_MESSAGE_START);\n      if (startIndex !== -1) {\n          // Si encontramos el inicio, tomamos el mensaje desde allí\n          // y limpiamos nuevamente por si hay algo más después\n          finalMessageForTicket = cleanHtmlAndBase64(finalMessageForTicket.substring(startIndex));\n      } else {\n          // Si es FortiSIEM pero no tiene el texto esperado, \n          // podríamos dejar un mensaje por defecto o el mensaje limpio original.\n          // Por ahora, lo dejaremos como el mensaje limpio original.\n          // Opcional: podrías poner aquí un mensaje como \"Mensaje de FortiSIEM con formato inesperado.\"\n      }\n  }\n\n\n  const mappedTicket = {\n    \"Numero de tk\": record['case.casenumber'] || 'N/A',\n    \"Estado\": getTextValue(record['case.status']) || 'N/A',\n    \"Creador\": getTextValue(record['case.custevent_ifx_ticketowner']) || 'N/A',\n    \"Tipo\": getTextValue(record['case.category']) || 'N/A',\n    \"Asunto\": ticketSubject || 'N/A', // Usamos el asunto capturado\n    \"Responsable\": getTextValue(record['case.custevent_ifx_directresponsible']) || 'N/A',\n    \"Fecha de creación\": fechaCreacionRaw || 'N/A',\n    \"Fecha de creación (Date)\": fechaCreacionDate,\n    \"Fecha del incidente/Solicitud\": fechaIncidenteRaw || 'N/A',\n    \"Fecha del incidente/Solicitud (Date)\": fechaIncidenteDate,\n    \"Cliente\": record['customer.entityid'] || 'N/A',\n    \"Origen Cliente\": record['customer.custentity_ifx_origin'] || 'N/A', \n    \"Perfil\": record['customer.custentity_ifx_profile'] || 'N/A',\n    \"Subsidiaria\": record['customer.custentity_ifx_subsidiary'] || 'N/A',\n    \"Cliente ID\": record['customer.custentity_ifx_id_quore'] || 'N/A',\n    \"Tipo de Cliente\": getTextValue(record['customer.custentity_ifx_customer_type']) || 'N/A',\n    \"Estado Cliente\": record['customer.custentity_ifx_customer_status'] || 'N/A',\n    \"Service Manager\": getTextValue(record['customer.custentity_ifx_servicemanager']) || 'N/A',\n    \"Contacto\": record['customer.custentity_ifx_contact'] || 'N/A',\n    \"Mensaje\": finalMessageForTicket // <-- Usamos el mensaje procesado\n  };\n  allTickets.push(mappedTicket);\n}\n\n// Ordenar todos los tickets por \"Fecha del incidente/Solicitud\" de forma descendente\nallTickets.sort((a, b) => {\n  const dateA = a[\"Fecha del incidente/Solicitud (Date)\"];\n  const dateB = b[\"Fecha del incidente/Solicitud (Date)\"];\n  if (!dateA && !dateB) return 0;\n  if (!dateA) return 1;\n  if (!dateB) return -1;\n  return dateB.getTime() - dateA.getTime();\n});\n\nconst mostRecentTicket = allTickets.length > 0 ? allTickets[0] : null;\n\n// === Formato para LLM ===\nlet summaryForLLM = \"\";\n\nif (mostRecentTicket) {\n  delete mostRecentTicket[\"Fecha de creación (Date)\"];\n  delete mostRecentTicket[\"Fecha del incidente/Solicitud (Date)\"];\n\n  summaryForLLM += \"--- Ticket Más Actualizado ---\\n\";\n  summaryForLLM += `Número: ${mostRecentTicket[\"Numero de tk\"]}\\n`;\n  summaryForLLM += `Estado: ${mostRecentTicket[\"Estado\"]}\\n`;\n  summaryForLLM += `Asunto: ${mostRecentTicket[\"Asunto\"]}\\n`;\n  summaryForLLM += `Tipo: ${mostRecentTicket[\"Tipo\"]}\\n`;\n  summaryForLLM += `Fecha Creación: ${mostRecentTicket[\"Fecha de creación\"]}\\n`;\n  summaryForLLM += `Fecha Incidente/Solicitud: ${mostRecentTicket[\"Fecha del incidente/Solicitud\"]}\\n`;\n  summaryForLLM += `Responsable: ${mostRecentTicket[\"Responsable\"]}\\n`;\n  summaryForLLM += `Cliente: ${mostRecentTicket[\"Cliente\"]}\\n`;\n  summaryForLLM += `Tipo de Cliente: ${mostRecentTicket[\"Tipo de Cliente\"]}\\n`;\n  summaryForLLM += `Service Manager: ${mostRecentTicket[\"Service Manager\"]}\\n`;\n  summaryForLLM += `Mensaje: ${mostRecentTicket[\"Mensaje\"]}\\n\\n`;\n\n  summaryForLLM += \"Este es el ticket más reciente basado en la 'Fecha del incidente/Solicitud'.\";\n} else {\n  summaryForLLM = \"No se encontraron tickets válidos para procesar.\";\n}\n\nreturn [{ json: { summary: summaryForLLM } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-192,0],"id":"d83f9d1e-989b-4f38-829f-5d8d8a1f4c27","name":"MapData"},{"parameters":{"promptType":"define","text":"=Role: Eres un analista de ciberseguridad experto y un comunicador técnico excepcional. Has sido asignado para procesar y consolidar múltiples informes individuales de ciberseguridad sobre ataques y amenazas recientes. Tu tarea es sintetizar esta información diversa en un único informe ejecutivo, claro, conciso y orientado a la acción, que pueda ser distribuido a un equipo de ciberseguridad o a la dirección.\n\nInstrucciones Generales:\n1.  **Analiza CUIDADOSAMENTE TODOS los resúmenes y datos** proporcionados en la sección \"Contenido de los Informes\".\n2.  **Sintetiza y CONSOLIDA la información de TODOS los informes** para detectar patrones comunes, actores de amenazas recurrentes, vectores de ataque prevalentes, industrias más afectadas y cualquier tendencia global significativa en ciberseguridad.\n3.  Genera un **informe ejecutivo unificado, claro y conciso**, resumiendo los puntos más críticos de todos los reportes.\n4.  **Detecta y extrae cualquier dirección IP** mencionada en el \"Contenido de los Informes\" para el análisis de GreyNoise.\n\n**Formato de Salida (OBLIGATORIO):**\nEl reporte final debe estar en **formato Markdown** y seguir estrictamente la siguiente estructura. No incluyas ningún texto o encabezado que no esté especificado. Los títulos de las secciones principales deben ser encabezados de nivel 2 (`##`). Los sub-apartados dentro de las secciones deben ser encabezados de nivel 3 (`###`) o listas (`* **Título:** Valor`).\n\n---\n\nInformación del Cliente y Evento (similar a \"Novedades\")\n\nDetalles del Evento\n\nDescripción y Recomendaciones\n\nAunque tu script actual está diseñado para consolidar múltiples reportes en un Informe General de Ciberseguridad, si el LLM va a procesar un único evento con este nivel de detalle (como el de las imágenes), podemos ajustar el prompt para que su salida se asemeje a esta estructura.\n\nLa clave será reformular el rol y las instrucciones para que, en lugar de consolidar, el LLM extraiga y resuma la información detallada de un solo evento en esas tres secciones.\n\nAquí te presento un nuevo prompt, totalmente rediseñado para generar un reporte Markdown con esa estructura específica, asumiendo que el input {{ $json.summary }} contendrá los detalles de un solo evento/incidente como el de tus imágenes:\n\nPrompt Detallado para el LLM (Reporte de Evento Específico - Formato 3 Secciones)\nRole: Eres un analista de ciberseguridad experto. Has recibido un informe detallado sobre un evento de seguridad específico. Tu tarea es analizar este informe y generar una \"Novedad\" (reporte de incidente) concisa y estructurada en formato Markdown, siguiendo el modelo visual proporcionado (tres secciones principales). El objetivo es comunicar de forma clara los detalles del evento, el análisis y las recomendaciones a un equipo de seguridad o stakeholders.\n\nInstrucciones Generales:\n1.  **Lee y analiza CUIDADOSAMENTE TODO el informe del evento** proporcionado en la sección \"Contenido del Informe del Evento\".\n2.  **Extrae y sintetiza la información clave** para cada una de las tres secciones definidas: \"Información del Cliente y Evento\", \"Detalles del Evento\" y \"Descripción y Recomendaciones\".\n3.  **Genera el reporte ejecutivo en formato Markdown**, siguiendo estrictamente la estructura y las reglas especificadas a continuación.\n\n**Formato de Salida (OBLIGATORIO):**\nEl reporte final debe estar en **formato Markdown** y seguir estrictamente la siguiente estructura. No incluyas ningún texto o encabezado que no esté especificado. Los títulos de las secciones principales deben ser encabezados de nivel 2 (`##`). Los sub-apartados dentro de las secciones deben ser encabezados de nivel 3 (`###`) o listas (`* **Título:** Valor`).\n\n---\n\n## Novedades\n\n### Información del Cliente y Evento\n(Sintetiza la información general del incidente y del cliente afectado.)\n\n* **Cliente Afectado:** [Extrae el nombre del cliente afectado]\n* **Fecha del Evento:** [Extrae la fecha y hora exacta del evento. Formato legible, ej., \"Sep 15 2025, 07:31:26 PM\"]\n* **Nº Ticket:** [Extrae el número de ticket]\n* **Severidad:** [Extrae la severidad y su valor numérico si está disponible, ej., \"MEDIUM (6)\"]\n* **Analista:** [Extrae el nombre del analista si está disponible o indica \"N/A\"]\n* **Categoría:** [Extrae la categoría del evento, ej., \"Security/Privilege Escalation\"]\n* **Regla Aplicada:** [Extrae la descripción de la regla de seguridad que disparó el evento, si está disponible]\n\n### Detalles del Evento\n(Proporciona los datos técnicos específicos del incidente.)\n\n* **Hostname:** [Extrae el hostname del dispositivo afectado]\n* **IP de Origen:** [Extrae la dirección IP de origen]\n* **Usuario que Realizó la Acción:** [Extrae el nombre del usuario involucrado en la acción]\n* **Dominio:** [Extrae el dominio asociado al evento]\n* **EventID:** [Extrae el EventID relevante]\n\n### Descripción y Recomendaciones\n(Detalla lo que sucedió, el análisis técnico y las acciones sugeridas.)\n\n**Descripción del Evento:**\n[Genera un párrafo claro y conciso describiendo el evento. Enfócate en qué ocurrió, quién lo hizo (si aplica) y en qué contexto, utilizando la información del informe. Por ejemplo: \"Se ha detectado la adición de un miembro a un grupo de seguridad habilitado...\". Evita repeticiones innecesarias.]\n\n**Características del Evento:**\n* **EventID:** [Repite el EventID y añade una descripción breve asociada, ej., \"EventID: 4728 (Miembro agregado a grupo de seguridad global)\"]\n* **Tipo de evento:** [Describe el tipo de evento, ej., \"Audit Success\"]\n* **Usuario administrador:** [Usuario con privilegios que realizó la acción]\n* **Nuevo miembro:** [Nombre del usuario o entidad agregada]\n* **Grupo objetivo:** [Nombre del grupo de seguridad afectado]\n* **Controlador de dominio:** [Nombre del controlador de dominio]\n* **Security ID del usuario administrador:** [SID del usuario administrador si está disponible]\n* **Security ID del nuevo miembro:** [SID del nuevo miembro si está disponible]\n\n**Análisis Técnico:**\n[Genera un párrafo o una lista de puntos que explique el \"por qué\" de la detección del evento y su relevancia de seguridad. Incluye los \"motivos significativos\" y el \"comportamiento que podría indicar\".]\n\n**Evaluación de Riesgo:**\n* **Nivel de riesgo:** [Extrae o infiere el nivel de riesgo, ej., \"MEDIO\"]\n* [Genera una lista de 2-3 factores que contribuyen a esta evaluación, basándote en el informe. Si no se especifican, puedes omitir esta lista o indicar \"Factores no especificados\".]\n\n**RECOMENDACIONES:**\n* [Genera una lista de 2-3 recomendaciones claras, accionables y específicas para mitigar el riesgo o investigar más a fondo, basadas en el informe. Si el informe detalla sub-puntos (como \"Revisar las políticas...\"), inclúyelos como sub-viñetas.]\n* [Asegúrate de incluir la recomendación \"Validar con el administrador crojas si esta adición fue autorizada y planificada\" si es relevante.]\n\n---\n\n**Contenido del Informe del Evento:**\n{{ $json.summary }}\n","options":{"systemMessage":"You are a helpful assistant"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[384,0],"id":"b29c36b7-3a5e-4ae3-a87e-69ca76b44f6b","name":"AI Agent"},{"parameters":{"model":{"__rl":true,"value":"llama-3.3-70B-Instruct","mode":"list","cachedResultName":"llama-3.3-70B-Instruct"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[384,208],"id":"2cea42fc-1733-4eca-b8d7-748399d96b9e","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"S46eGA7oXnm2SZCZ","name":"OpenAi account 2"}}},{"parameters":{"jsCode":"// ---------------------------------------------\n// FUNCIÓN: Convierte Markdown → HTML + template\n// ---------------------------------------------\n\n// --- Helper Functions (adaptadas de tu script de referencia) ---\nfunction formatISO(date = new Date()) {\n  const pad = (n) => String(n).padStart(2, '0');\n  const d = new Date(date);\n  return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}`;\n}\n\nfunction createEmailSafeHeader(reportTitle, clientName, reportDateISO = null) {\n  const todayISO = reportDateISO || formatISO();\n  const bg = \"https://media.licdn.com/dms/image/v2/D4E3DAQFqcEmbz29Nmw/image-scale_191_1128/image-scale_191_1128/0/1695664141867/ifx_networks_cover?e=2147483647&v=beta&t=JVG-v8jzdy-D85rsPWHrfn_rzAnV9459-s6uzEw-bPM\";\n  const primaryColor = \"#1a237e\"; // Azul oscuro corporativo\n\n  return `\n    <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: ${primaryColor}; background-image: url('${bg}'); background-size: cover; background-position: right center; margin-bottom: 20px;\">\n      <tr>\n        <td align=\"left\" valign=\"middle\" width=\"120\" style=\"padding: 15px;\">\n          <img src=\"https://ifxnetworks.com/hubfs/IFX/logo-ifx--primary.svg\" alt=\"IFX Networks\" style=\"width: 110px; height: auto;\">\n        </td>\n        <td align=\"left\" valign=\"middle\" style=\"padding: 15px;\">\n          <h1 style=\"color: #ffffff; font-size: 28px; font-weight: 800; margin: 0; text-shadow: 1px 1px 3px rgba(0,0,0,0.5);\">${reportTitle}</h1>\n          ${clientName ? `<p style=\"color: #ffffff; font-size: 16px; margin: 5px 0 0 0; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\">Para: <strong>${clientName}</strong></p>` : ''}\n          <p style=\"color:#ffffff;font-size:12px;margin:6px 0 0 0;text-shadow:1px 1px 2px rgba(0,0,0,0.5);\">Fecha de emisión: <strong>${todayISO}</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" align=\"right\" style=\"padding-right: 15px; padding-bottom: 5px;\">\n          <p style=\"color: #ffffff; font-size: 11px; margin: 0;\">Generado por <i style=\"font-style: italic;\">aifx</i></p>\n        </td>\n      </tr>\n    </table>\n    `;\n}\n\nfunction createEmailFooter() {\n  const secondaryColor = \"#232a34\";\n  return `\n    <div style=\"background:${secondaryColor};color:#e0e0e0;padding:24px 30px;font-size:13px;text-align:left;margin-top:20px;border-radius:0 0 8px 8px;\">\n      <div style=\"font-weight:700;color:#fff;margin-bottom:4px;\">IFX Networks</div>\n      <div style=\"line-height:1.6;\">\n        25 años de experiencia en el mercado de las Telecomunicaciones.<br>\n        Diagonal 97 No. 17 – 60 piso 4, Bogotá, Colombia<br>\n        +57 (601) 369 3000 — CARE: +57 (601) 369 3024\n      </div>\n    </div>`;\n}\n\n// --- Markdown to HTML Conversion Logic (Mejorada) ---\nfunction convertMarkdownToHtml(markdown) {\n  let html = markdown || '';\n\n  // Convertir encabezados de Markdown a HTML con estilos\n  html = html.replace(/^## (.*?)$/gm, '<h1 style=\"font-size: 28px; color: #0a1f44; font-weight: 800; margin: 30px 0 12px; padding-bottom: 6px; border-bottom: 3px solid #0071ce; line-height: 1.2;\">$1</h1>');\n  html = html.replace(/^### (.*?)$/gm, '<h2 style=\"font-size: 24px; color: #123c69; font-weight: 700; margin: 26px 0 10px; padding-bottom: 4px; border-bottom: 2px solid #0071ce; line-height: 1.2;\">$1</h2>');\n  html = html.replace(/^#### (.*?)$/gm, '<h3 style=\"font-size: 20px; color: #1a1a1a; font-weight: 600; margin: 22px 0 8px; line-height: 1.2;\">$1</h3>');\n  html = html.replace(/^##### (.*?)$/gm, '<h4 style=\"font-size: 18px; color: #333; font-weight: 600; margin: 18px 0 6px; line-height: 1.2;\">$1</h4>'); // Añadido para H4, si es necesario\n\n\n  // Negritas\n  html = html.replace(/\\*\\*(.*?)\\*\\*/g, '<strong style=\"font-weight: bold; color: #041e42;\">$1</strong>');\n  \n  // Links\n  html = html.replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\" style=\"color:#0071ce;text-decoration:none;\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Listas (agrupando <li> en <ul>)\n  // Primero, reemplazar las viñetas Markdown por <li>\n  html = html.replace(/^- (.*?)$/gm, '<li style=\"margin-bottom:5px;font-size:16px;line-height:1.5;\">$1</li>');\n  \n  const groupedLines = [];\n  let inList = false;\n  for (const line of html.split('\\n')) {\n    if (line.trim().startsWith('<li>')) {\n      if (!inList) {\n        groupedLines.push('<ul style=\"margin-left:10px;padding-left:20px;margin-bottom:10px;list-style-type:disc;\">');\n        inList = true;\n      }\n      groupedLines.push(line);\n    } else {\n      if (inList) {\n        groupedLines.push('</ul>');\n        inList = false;\n      }\n      groupedLines.push(line);\n    }\n  }\n  if (inList) groupedLines.push('</ul>');\n  html = groupedLines.join('\\n');\n\n  // Tablas Markdown → HTML (con estilos inyectados)\n  html = html.replace(/((?:^\\|.*\\|\\s*\\n?)+)/gm, match => {\n    const rows = match.trim().split('\\n').map(r => r.trim().split('|').filter(c => c.trim()));\n    // Filtrar la línea de separación de la cabecera (---)\n    const headerRows = rows.filter(r => !r.every(c => /^-+$/.test(c)));\n    if (headerRows.length < 1) return ''; // No hay datos válidos para tabla\n\n    const header = headerRows[0];\n    const body = headerRows.slice(1);\n    \n    const thead = `<thead><tr>${header.map(h => `<th style=\"border:1px solid #ccc;padding:8px 12px;text-align:left;background-color:#0071ce;color:#fff;font-weight:bold;\">${h.trim()}</th>`).join('')}</tr></thead>`;\n    const tbody = `<tbody>${body.map(row => `<tr>${row.map(c => `<td style=\"border:1px solid #ccc;padding:8px 12px;text-align:left;\">${c.trim()}</td>`).join('')}</tr>`).join('')}</tbody>`;\n    return `<table style=\"border-collapse:collapse;width:100%;margin:20px 0;font-size:14px;\" class=\"markdown-table\">${thead}${tbody}</table>`;\n  });\n\n  // Manejo de párrafos para asegurar que el texto esté envuelto\n  html = html.split('\\n').map(line => {\n    const trimmedLine = line.trim();\n    if (trimmedLine === '') {\n      return ''; // Eliminar líneas vacías extra, serán manejadas por <p>\n    }\n    // No envolver si ya es una etiqueta de bloque\n    if (trimmedLine.startsWith('<h') || trimmedLine.startsWith('<ul') || trimmedLine.startsWith('<table') || trimmedLine.startsWith('<hr') || trimmedLine.startsWith('<div') || trimmedLine.startsWith('<p>')) {\n      return line;\n    }\n    return `<p style=\"margin-bottom:10px;\">${line}</p>`;\n  }).join('\\n');\n\n  // Consolidar múltiples <p></p> o <p><br/></p>\n  html = html.replace(/(<p[^>]*>)?\\s*<\\/p>\\s*(<p[^>]*>)?/g, ''); // Eliminar párrafos vacíos o redundantes\n  html = html.replace(/<p style=\"margin-bottom:10px;\"><\\/p>/g, ''); // Limpiar específicamente <p> vacíos\n\n  return html;\n}\n\n// ------------------------------------------------------------\n// 2. TEMPLATE principal con cabecera y pie de página corporativos\n//    y la integración de la lógica de tu script de referencia\n// ------------------------------------------------------------\nfunction generateReportHtml(markdownContent, reportTitle = \"Informe de Incidente\", clientName = null) {\n    if (!markdownContent) markdownContent = 'No hay contenido para mostrar en el informe.';\n\n    const reportDateISO = formatISO(); // Fecha actual para el reporte\n\n    // Se usan las funciones de tu script de referencia para header y footer\n    const headerHtml = createEmailSafeHeader(reportTitle, clientName, reportDateISO);\n    const footerHtml = createEmailFooter();\n\n    // Convertir el markdown del LLM a HTML\n    const bodyHtml = convertMarkdownToHtml(markdownContent);\n\n    // --- Estilos generales para el cuerpo ---\n    const contentStyle = `padding:28px;`;\n\n    const formattedHTML = `\n<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n<meta charset=\"UTF-8\">\n<title>${reportTitle}</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<style>\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background-color: #f4f6f8;\n        margin: 0;\n        color: #2c3e50;\n        -webkit-text-size-adjust: 100%; /* Para compatibilidad con clientes de correo */\n        -ms-text-size-adjust: 100%;\n    }\n    .container {\n        max-width: 800px;\n        margin: 20px auto;\n        background: #fff;\n        border-radius: 8px;\n        box-shadow: 0 4px 10px rgba(44, 62, 80, 0.1);\n        overflow: hidden;\n    }\n    h1, h2, h3, h4 {\n        font-family: 'Segoe UI', Roboto, sans-serif;\n        color: #041e42; /* Color principal para títulos */\n    }\n    h1 { font-size: 28px; font-weight: 800; margin: 30px 0 12px; padding-bottom: 6px; border-bottom: 3px solid #0071ce; line-height: 1.2; }\n    h2 { font-size: 24px; font-weight: 700; margin: 26px 0 10px; padding-bottom: 4px; border-bottom: 2px solid #0071ce; line-height: 1.2; }\n    h3 { font-size: 20px; font-weight: 600; margin: 22px 0 8px; line-height: 1.2; }\n    h4 { font-size: 18px; font-weight: 600; margin: 18px 0 6px; line-height: 1.2; }\n    p {\n        margin-bottom: 10px;\n        line-height: 1.6;\n        font-size: 16px;\n    }\n    strong {\n        font-weight: bold;\n        color: #041e42;\n    }\n    ul {\n        margin-left: 10px;\n        padding-left: 20px;\n        margin-bottom: 10px;\n        list-style-type: disc;\n    }\n    li {\n        margin-bottom: 5px;\n        font-size: 16px;\n        line-height: 1.5;\n    }\n    a {\n        color: #0071ce;\n        text-decoration: none;\n    }\n    .markdown-table {\n        border-collapse: collapse;\n        width: 100%;\n        margin: 20px 0;\n        font-size: 14px;\n    }\n    .markdown-table th, .markdown-table td {\n        border: 1px solid #ccc;\n        padding: 8px 12px;\n        text-align: left;\n    }\n    .markdown-table th {\n        background-color: #0071ce;\n        color: #fff;\n        font-weight: bold;\n    }\n    .markdown-table tr:nth-child(even) td {\n        background: #f9f9f9;\n    }\n    hr {\n        border: 0;\n        height: 1px;\n        background-color: #e9ecef;\n        margin: 30px 0;\n    }\n    /* Estilos para el panel de resumen general si se usara una lógica similar a emphasizeResumenGeneral */\n    .summary-card {\n        background:#f7fbff;\n        border:1px solid #cfe8ff;\n        border-left:5px solid #2b7bff;\n        border-radius:8px;\n        padding:16px 18px;\n        margin:10px 0 18px 0;\n    }\n</style>\n</head>\n<body>\n    <div class=\"container\">\n        ${headerHtml}\n        <div class=\"content\" style=\"${contentStyle}\">\n            ${bodyHtml}\n        </div>\n        ${footerHtml}\n    </div>\n</body>\n</html>`;\n    return formattedHTML;\n}\n\n// -----------------------------------------------------------------\n// EJECUCIÓN DEL NODO (adaptada para recibir el output del LLM)\n// -----------------------------------------------------------------\ntry {\n    const inputData = $input.first().json;\n    \n    // CAMBIO AQUÍ: Ahora extraemos el markdown de `inputData.output`\n    const markdownText = inputData.output || ''; \n    \n    // Extraer el título del reporte y el cliente del markdown para el header\n    // El título es el H2 principal que empieza la notificación\n    const reportTitleMatch = markdownText.match(/^## (.*?)\\n/);\n    const reportTitle = reportTitleMatch ? reportTitleMatch[1].trim() : \"Notificación de Incidente de Seguridad\";\n\n    // Extraer el nombre del cliente del markdown para el header\n    const clientMatch = markdownText.match(/\\*\\*Cliente Afectado:\\*\\*\\s*(.*?)\\n/);\n    const clientName = clientMatch ? clientMatch[1].trim() : null;\n\n    const finalHtmlOutput = generateReportHtml(markdownText, reportTitle, clientName);\n\n    return [\n        {\n            json: {\n                html: finalHtmlOutput,\n                markdownInput: markdownText \n            },\n        },\n    ];\n} catch (error) {\n    return [{ json: { error: String(error), stack: error && error.stack ? error.stack : undefined } }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[848,0],"id":"637564fa-8d99-4f7c-b13b-f2b07768fb75","name":"Convert to HTML"},{"parameters":{"toRecipients":"=cbautista@ifxcorp.com","subject":"=Resumen prueba Tk SOC","bodyContent":"={{ $json.html }}","additionalFields":{"bodyContentType":"html"}},"type":"n8n-nodes-base.microsoftOutlook","typeVersion":2,"position":[1072,0],"id":"2728b95b-4a09-4db1-8b76-5228a8363876","name":"Send Mail","webhookId":"4d4b099c-c77e-49cd-924d-254b0d51e936","credentials":{"microsoftOutlookOAuth2Api":{"id":"zrNdsL9SZMvBfPt3","name":"Microsoft Outlook cbautista"}}},{"parameters":{"collection":"forti_siem_ttk","options":{}},"type":"n8n-nodes-base.mongoDb","typeVersion":1.2,"position":[-112,144],"id":"463b8d10-3431-4c06-98eb-8a60225fcc87","name":"Find documents","credentials":{"mongoDb":{"id":"AqFE8J1mAxMEpICm","name":"CB - DBMONGOAIFX"}},"disabled":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"60bf9a5c-e8e7-4e9d-89dd-25819020830d","leftValue":"","rightValue":"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[96,160],"id":"f6eb1ca1-caad-4e01-87e5-139523d74b9a","name":"If","disabled":true},{"parameters":{"operation":"insert","collection":"forti_siem_ttk","options":{}},"type":"n8n-nodes-base.mongoDb","typeVersion":1.2,"position":[848,208],"id":"f769aad7-87c2-492f-ba67-5839ab721e75","name":"Insert documents","credentials":{"mongoDb":{"id":"AqFE8J1mAxMEpICm","name":"CB - DBMONGOAIFX"}}}],"connections":{"Schedule Trigger":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"MapData","type":"main","index":0}]]},"MapData":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Insert documents","type":"main","index":0},{"node":"Convert to HTML","type":"main","index":0}]]},"Convert to HTML":{"main":[[{"node":"Send Mail","type":"main","index":0}]]},"Find documents":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[],[{"node":"AI Agent","type":"main","index":0}]]},"Insert documents":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"0f965c5e-bf83-4d8a-8515-a91e3fb4888d","triggerCount":0,"shared":[{"createdAt":"2025-09-16T20:26:39.232Z","updatedAt":"2025-09-16T20:26:39.232Z","role":"workflow:owner","workflowId":"FWkAvzzQEbgcToMj","projectId":"f6RX0bgoA61ZNo42"}],"tags":[]}