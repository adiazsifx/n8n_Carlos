{"createdAt":"2025-09-16T20:26:39.227Z","updatedAt":"2025-09-30T01:34:51.000Z","id":"FWkAvzzQEbgcToMj","name":"CB - Notificaciones FortiSIEM Netsuite","active":false,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"minutes","minutesInterval":1}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-336,-128],"id":"d40f9993-29de-453a-b56f-c4a2c1c44f6a","name":"Schedule Trigger","disabled":true},{"parameters":{"method":"POST","url":"https://ifx-netsuite-experience-prd.us-e1.cloudhub.io/api/execute/post_script?script=2011&deploy=1","sendBody":true,"specifyBody":"json","jsonBody":"={\n    \"actionRest\": 5,\n    \"savedSearchID\":\"customsearch_ifx_soc_cases_frs\",\n    \"page\":1,\n    \"filters\": [],\n    \"pageSize\": 5\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-112,-16],"id":"c6b1697f-dd42-406a-a73c-9818f9fd65e3","name":"HTTP Request"},{"parameters":{"jsCode":"// Function node — n8n\n// Mapea la respuesta JSON del endpoint, filtra para obtener el ticket más actualizado\n// basado en 'case.startdate', y lo formatea para un LLM.\n// Incluye una función para limpiar HTML y Base64 del campo 'message',\n// y una lógica para extraer un mensaje específico si el asunto es \"FortiSIEM\".\n\n// --- Helper Functions ---\nfunction parseDateString(dateStr) {\n  if (!dateStr || typeof dateStr !== 'string') return null;\n  try {\n    const parts = dateStr.match(/(\\d{2})\\/(\\d{2})\\/(\\d{4})\\s(\\d{1,2}):(\\d{2})\\s(AM|PM)/i);\n    if (parts) {\n      let [, month, day, year, hours, minutes, ampm] = parts;\n      hours = parseInt(hours, 10);\n      minutes = parseInt(minutes, 10);\n      if (ampm && ampm.toUpperCase() === 'PM' && hours < 12) hours += 12;\n      if (ampm && ampm.toUpperCase() === 'AM' && hours === 12) hours = 0;\n      const date = new Date(year, parseInt(month, 10) - 1, parseInt(day, 10), hours, minutes);\n      return isNaN(date.getTime()) ? null : date;\n    }\n    const d = new Date(dateStr);\n    return isNaN(d.getTime()) ? null : d;\n  } catch (e) {\n    console.error(\"Error parsing date string:\", dateStr, e);\n    return null;\n  }\n}\n\nconst getTextValue = (field) => {\n  if (field && Array.isArray(field) && field.length > 0 && field[0] && typeof field[0].text === 'string') {\n    return field[0].text;\n  }\n  return '';\n};\n\nfunction cleanHtmlAndBase64(htmlString) {\n  if (!htmlString || typeof htmlString !== 'string') return '';\n  let cleanedText = htmlString;\n  cleanedText = cleanedText.replace(/<[^>]*>/g, '');\n  cleanedText = cleanedText.replace(/\\b(?:[A-Za-z0-9+/]{4}){8,}(?:[A-Za-z0-9+/]{2}={2}|[A-Za-z0-9+/]{3}=)?\\b/g, '[ADJUNTO_REMOVIDO]');\n  cleanedText = cleanedText.replace(/data:[^;]+;base64,[A-Za-z0-9+/=]+/g, '[DATA_URI_REMOVIDA]');\n  cleanedText = cleanedText.replace(/(\\s*\\r?\\n\\s*){2,}/g, '\\n'); \n  cleanedText = cleanedText.replace(/[ \\t]+/g, ' ');\n  return cleanedText.trim();\n}\n\n// --- Main Script ---\nconst items = $input.all();\nconst allTickets = [];\n\nconst rawTicketsData = items[0].json.data; \nconst ticketsToProcess = Array.isArray(rawTicketsData) ? rawTicketsData : (rawTicketsData ? [rawTicketsData] : []);\n\nconst FORTISIEM_MESSAGE_START = \"The following Incident has triggered for the first time.\";\n\nfor (const itemData of ticketsToProcess) {\n  const record = itemData.values; \n\n  if (!record || typeof record !== 'object') {\n    console.warn(\"Skipping invalid itemData, no 'values' object found:\", itemData);\n    continue;\n  }\n\n  const fechaCreacionRaw = record['case.createddate'];\n  const fechaIncidenteRaw = record['case.startdate'];\n  const ticketSubject = record['subject'] || ''; // Capturamos el asunto para la lógica\n  let originalMessage = record['message'] || ''; // Capturamos el mensaje original\n\n  const fechaCreacionDate = parseDateString(fechaCreacionRaw);\n  const fechaIncidenteDate = parseDateString(fechaIncidenteRaw);\n  \n  let finalMessageForTicket = cleanHtmlAndBase64(originalMessage); // Limpiamos el mensaje por defecto\n\n  // === Lógica para FortiSIEM ===\n  if (ticketSubject.includes(\"FortiSIEM\")) {\n      const startIndex = finalMessageForTicket.indexOf(FORTISIEM_MESSAGE_START);\n      if (startIndex !== -1) {\n          // Si encontramos el inicio, tomamos el mensaje desde allí\n          // y limpiamos nuevamente por si hay algo más después\n          finalMessageForTicket = cleanHtmlAndBase64(finalMessageForTicket.substring(startIndex));\n      } else {\n          // Si es FortiSIEM pero no tiene el texto esperado, \n          // podríamos dejar un mensaje por defecto o el mensaje limpio original.\n          // Por ahora, lo dejaremos como el mensaje limpio original.\n          // Opcional: podrías poner aquí un mensaje como \"Mensaje de FortiSIEM con formato inesperado.\"\n      }\n  }\n\n\n  const mappedTicket = {\n    \"Numero de tk\": record['case.casenumber'] || 'N/A',\n    \"Estado\": getTextValue(record['case.status']) || 'N/A',\n    \"Creador\": getTextValue(record['case.custevent_ifx_ticketowner']) || 'N/A',\n    \"Tipo\": getTextValue(record['case.category']) || 'N/A',\n    \"Asunto\": ticketSubject || 'N/A', // Usamos el asunto capturado\n    \"Responsable\": getTextValue(record['case.custevent_ifx_directresponsible']) || 'N/A',\n    \"Fecha de creación\": fechaCreacionRaw || 'N/A',\n    \"Fecha de creación (Date)\": fechaCreacionDate,\n    \"Fecha del incidente/Solicitud\": fechaIncidenteRaw || 'N/A',\n    \"Fecha del incidente/Solicitud (Date)\": fechaIncidenteDate,\n    \"Cliente\": record['customer.entityid'] || 'N/A',\n    \"Origen Cliente\": record['customer.custentity_ifx_origin'] || 'N/A', \n    \"Perfil\": record['customer.custentity_ifx_profile'] || 'N/A',\n    \"Subsidiaria\": record['customer.custentity_ifx_subsidiary'] || 'N/A',\n    \"Cliente ID\": record['customer.custentity_ifx_id_quore'] || 'N/A',\n    \"Tipo de Cliente\": getTextValue(record['customer.custentity_ifx_customer_type']) || 'N/A',\n    \"Estado Cliente\": record['customer.custentity_ifx_customer_status'] || 'N/A',\n    \"Service Manager\": getTextValue(record['customer.custentity_ifx_servicemanager']) || 'N/A',\n    \"Contacto\": record['customer.custentity_ifx_contact'] || 'N/A',\n    \"Mensaje\": finalMessageForTicket // <-- Usamos el mensaje procesado\n  };\n  allTickets.push(mappedTicket);\n}\n\n// Ordenar todos los tickets por \"Fecha del incidente/Solicitud\" de forma descendente\nallTickets.sort((a, b) => {\n  const dateA = a[\"Fecha del incidente/Solicitud (Date)\"];\n  const dateB = b[\"Fecha del incidente/Solicitud (Date)\"];\n  if (!dateA && !dateB) return 0;\n  if (!dateA) return 1;\n  if (!dateB) return -1;\n  return dateB.getTime() - dateA.getTime();\n});\n\nconst mostRecentTicket = allTickets.length > 0 ? allTickets[0] : null;\n\n// === Formato para LLM ===\nlet summaryForLLM = \"\";\n\nif (mostRecentTicket) {\n  delete mostRecentTicket[\"Fecha de creación (Date)\"];\n  delete mostRecentTicket[\"Fecha del incidente/Solicitud (Date)\"];\n\n  summaryForLLM += \"--- Ticket Más Actualizado ---\\n\";\n  summaryForLLM += `Número: ${mostRecentTicket[\"Numero de tk\"]}\\n`;\n  summaryForLLM += `Estado: ${mostRecentTicket[\"Estado\"]}\\n`;\n  summaryForLLM += `Asunto: ${mostRecentTicket[\"Asunto\"]}\\n`;\n  summaryForLLM += `Tipo: ${mostRecentTicket[\"Tipo\"]}\\n`;\n  summaryForLLM += `Fecha Creación: ${mostRecentTicket[\"Fecha de creación\"]}\\n`;\n  summaryForLLM += `Fecha Incidente/Solicitud: ${mostRecentTicket[\"Fecha del incidente/Solicitud\"]}\\n`;\n  summaryForLLM += `Responsable: ${mostRecentTicket[\"Responsable\"]}\\n`;\n  summaryForLLM += `Cliente: ${mostRecentTicket[\"Cliente\"]}\\n`;\n  summaryForLLM += `Tipo de Cliente: ${mostRecentTicket[\"Tipo de Cliente\"]}\\n`;\n  summaryForLLM += `Service Manager: ${mostRecentTicket[\"Service Manager\"]}\\n`;\n  summaryForLLM += `Mensaje: ${mostRecentTicket[\"Mensaje\"]}\\n\\n`;\n\n  summaryForLLM += \"Este es el ticket más reciente basado en la 'Fecha del incidente/Solicitud'.\";\n} else {\n  summaryForLLM = \"No se encontraron tickets válidos para procesar.\";\n}\n\nreturn [{ json: { summary: summaryForLLM } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[128,-16],"id":"d83f9d1e-989b-4f38-829f-5d8d8a1f4c27","name":"MapData"},{"parameters":{"model":{"__rl":true,"value":"llama-3.3-70B-Instruct","mode":"list","cachedResultName":"llama-3.3-70B-Instruct"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[384,208],"id":"2cea42fc-1733-4eca-b8d7-748399d96b9e","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"S46eGA7oXnm2SZCZ","name":"OpenAi account 2"}}},{"parameters":{"jsCode":"const items = [];\n\n// FUNCIÓN CORREGIDA: Extremadamente robusta para el patrón * **Etiqueta:** Valor\nconst extractValue = (section, label) => {\n    if (typeof section !== 'string' || !section) return 'N/A';\n    \n    // Escapa caracteres especiales de regex en la etiqueta (ej. N° -> N\\°)\n    const escapedLabel = label.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    \n    // RegEx FINAL: Busca el patrón * **Etiqueta:** Valor en cualquier parte de la sección.\n    const regex = new RegExp(`\\\\*\\\\s*\\\\*\\\\*?${escapedLabel}\\\\*\\\\*?\\\\s*:\\\\s*([^\\\\n]+)`, 'i');\n    \n    const match = section.match(regex);\n    \n    return (match && match[1]) ? match[1].trim() : 'N/A';\n};\n\n// Función para extraer la descripción\nconst extractDescription = (section) => {\n    if (typeof section !== 'string' || !section) return 'Descripción no disponible.';\n    // Busca \"Descripción del Evento:\" y captura hasta el siguiente encabezado Markdown o el final.\n    const regex = /Descripción del Evento:\\s*([\\s\\S]*?)(?=\\*\\*Características del Evento\\*\\*|N\\/A|Análisis Técnico)/i;\n    const match = section.match(regex);\n    return (match && match[1]) ? match[1].trim().replace(/\\n/g, ' ') : 'Descripción no disponible.';\n};\n\n\nfor (const item of $input.all()) {\n    const rawOutput = item.json.output || \"\";\n    \n    // --- 1. PROCESAMIENTO: Dividir el texto en secciones ---\n    const sections = {\n        info: rawOutput.match(/### Información del Cliente y Evento([\\s\\S]*?)###/i),\n        details: rawOutput.match(/### Detalles del Evento([\\s\\S]*?)###/i),\n        // La sección de descripción es la última, capturamos todo lo que queda\n        desc: rawOutput.match(/### Descripción y Recomendaciones([\\s\\S]*)/i)\n    };\n    \n    // Usamos el grupo de captura [1] para obtener solo el texto DESPUÉS del encabezado ###\n    const infoSection = sections.info ? sections.info[1] : '';\n    const detailsSection = sections.details ? sections.details[1] : '';\n    // Para la sección final (desc), usamos [0] (el bloque completo) para las RegEx internas de listas.\n    const descBlock = sections.desc ? sections.desc[0] : '';\n    \n    // --- 2. EXTRACCIÓN de Datos Clave al objeto 'data' ---\n    \n    const data = {\n        // Info Cliente y Evento\n        'N° Ticket': extractValue(infoSection, 'Nº Ticket'),\n        'Severidad': extractValue(infoSection, 'Severidad'),\n        'Fecha del Evento': extractValue(infoSection, 'Fecha del Evento'),\n        'Cliente Afectado': extractValue(infoSection, 'Cliente Afectado'),\n        'Analista': extractValue(infoSection, 'Analista'),\n        // Se asume que el LLM genera la Categoría correctamente con * **Categoría:** Valor\n        'Categoría': extractValue(infoSection, 'Categoría'),\n        'Regla Aplicada': extractValue(infoSection, 'Regla Aplicada'),\n        \n        // Detalles del Evento\n        'IP de Origen': extractValue(detailsSection, 'IP de Origen'),\n        'Usuario que Realizó la Acción': extractValue(detailsSection, 'Usuario que Realizó la Acción'),\n        'Hostname': extractValue(detailsSection, 'Hostname'),\n        'Dominio': extractValue(detailsSection, 'Dominio'),\n        'EventID': extractValue(detailsSection, 'EventID'),\n        \n        // Descripción y Análisis (USANDO LA LÍNEA MODIFICADA AQUÍ)\n        'Descripción del Evento': extractDescription(descBlock),\n        'Nivel de riesgo': extractValue(descBlock, 'Nivel de riesgo'), // <--- CAMBIO CLAVE APLICADO\n        \n        // Extraer Listas\n        Factores_Array: (descBlock.match(/Factores que contribuyen a esta evaluación:([\\s\\S]*?)RECOMENDACIONES/i) || [''])[0]\n            .split('\\n')\n            .filter(line => line.includes('+'))\n            .map(line => line.replace(/\\+/g, '').trim().replace(/\\.$/, '')),\n            \n        Recomendaciones_Array: (descBlock.match(/RECOMENDACIONES:([\\s\\S]*)/i) || [''])[0]\n            .split('\\n')\n            .filter(line => line.includes('*') && !line.includes('Security ID'))\n            .map(line => line.replace(/\\*/g, '').trim().replace(/\\.$/, ''))\n            .filter(line => line.length > 5 && !line.includes('RECOMENDACIONES'))\n    };\n    \n    // --- 3. VARIABLES SEGURAS PARA CLASES CSS ---\n    const severity = data.Severidad || \"N/A\";\n    const severityClass = severity.split(\" \")[0].toLowerCase();\n    const riskLevel = data[\"Nivel de riesgo\"] || \"N/A\";\n    // Mapeo de Nivel de riesgo: Medio -> medio, Alto -> alto, etc.\n    const riskClass = riskLevel.split(\" \")[0].toLowerCase().replace(':', '');\n\n\n    // --- 4. GENERACIÓN DEL HTML (Se mantiene sin cambios) ---\n    const htmlContent = `\n<div class=\"report-container\">\n    <style>\n        /* INICIO: Estilos CSS (omitidos por brevedad) */\n        .report-container { /* ... */ }\n        .card { /* ... */ }\n        /* ... */\n        .risk-${riskClass} { \n            font-weight: bold;\n            color: ${riskClass === 'medio' ? '#ff8a00' : (riskClass === 'alto' ? '#dc3545' : '#007bff')}; \n            background-color: ${riskClass === 'medio' ? '#fff0db' : (riskClass === 'alto' ? '#fcebeb' : '#e6f7ff')};\n            padding: 4px 10px;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        /* ... */\n    </style>\n    \n    <div class=\"card card-summary\">\n        <h2 class=\"card-title\">🚨 Evento de Seguridad - Resumen</h2>\n        <div class=\"summary-grid\">\n            <div class=\"data-item\"><span class=\"label\">Ticket:</span> <span class=\"value ticket-number\">${data[\"N° Ticket\"]}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Severidad:</span> <span class=\"value severity severity-${severityClass}\">${severity}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Fecha/Hora:</span> <span class=\"value\">${data[\"Fecha del Evento\"]}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Cliente Afectado:</span> <span class=\"value\">${data[\"Cliente Afectado\"]}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Analista:</span> <span class=\"value\">${data.Analista}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Categoría:</span> <span class=\"value\">${data.Categoría}</span></div>\n        </div>\n    </div>\n\n    <div class=\"card card-details\">\n        <h3 class=\"card-title\">Detalles Técnicos del Acceso</h3>\n        <p class=\"description-text\"><strong>Descripción:</strong> ${data[\"Descripción del Evento\"]}</p>\n        <hr>\n        <div class=\"detail-columns\">\n            <div class=\"data-item\"><span class=\"label\">Regla Aplicada:</span> <span class=\"value\">${data[\"Regla Aplicada\"]}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Event ID:</span> <span class=\"value\">${data.EventID}</span></div>\n            <div class=\"data-item\"><span class=\"label\">IP de Origen:</span> <span class=\"value ip-address\">${data[\"IP de Origen\"]}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Usuario:</span> <span class=\"value\">${data[\"Usuario que Realizó la Acción\"]}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Hostname:</span> <span class=\"value\">${data.Hostname}</span></div>\n            <div class=\"data-item\"><span class=\"label\">Dominio:</span> <span class=\"value\">${data.Dominio}</span></div>\n        </div>\n    </div>\n\n    <div class=\"card card-analysis\">\n        <h3 class=\"card-title\">Análisis de Riesgo y Acciones</h3>\n\n        <div class=\"risk-section data-item\">\n            <span class=\"label\">Nivel de Riesgo:</span> \n            <span class=\"value risk-level risk-${riskClass}\">\n                ${riskLevel}\n            </span>\n        </div>\n        \n        <hr>\n\n        <h4>Factores de Riesgo:</h4>\n        <ul class=\"factors-list\">\n            ${data.Factores_Array.map(f => `<li>${f}</li>`).join('')}\n        </ul>\n\n        <h4>Recomendaciones:</h4>\n        <ol class=\"recommendations-list\">\n            ${data.Recomendaciones_Array.map(r => `<li>${r}</li>`).join('')}\n        </ol>\n    </div>\n</div>\n    `;\n\n    // 5. Devolver SOLO el objeto con el HTML\n    items.push({ htmlContent: htmlContent });\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[848,-16],"id":"637564fa-8d99-4f7c-b13b-f2b07768fb75","name":"Convert to HTML"},{"parameters":{"toRecipients":"=cbautista@ifxcorp.com","subject":"=Resumen prueba Tk SOC","bodyContent":"={{ $json.htmlContent }}","additionalFields":{"bodyContentType":"html"}},"type":"n8n-nodes-base.microsoftOutlook","typeVersion":2,"position":[1088,-16],"id":"2728b95b-4a09-4db1-8b76-5228a8363876","name":"Send Mail","webhookId":"4d4b099c-c77e-49cd-924d-254b0d51e936","credentials":{"microsoftOutlookOAuth2Api":{"id":"zrNdsL9SZMvBfPt3","name":"Microsoft Outlook cbautista"}}},{"parameters":{"collection":"forti_siem_ttk","options":{}},"type":"n8n-nodes-base.mongoDb","typeVersion":1.2,"position":[-128,224],"id":"463b8d10-3431-4c06-98eb-8a60225fcc87","name":"Find documents","credentials":{"mongoDb":{"id":"AqFE8J1mAxMEpICm","name":"CB - DBMONGOAIFX"}},"disabled":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"60bf9a5c-e8e7-4e9d-89dd-25819020830d","leftValue":"","rightValue":"","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[96,224],"id":"f6eb1ca1-caad-4e01-87e5-139523d74b9a","name":"If","disabled":true},{"parameters":{"operation":"insert","collection":"forti_siem_ttk","options":{}},"type":"n8n-nodes-base.mongoDb","typeVersion":1.2,"position":[848,208],"id":"f769aad7-87c2-492f-ba67-5839ab721e75","name":"Insert documents","credentials":{"mongoDb":{"id":"AqFE8J1mAxMEpICm","name":"CB - DBMONGOAIFX"}}},{"parameters":{"promptType":"define","text":"=Role: Eres un analista de ciberseguridad experto. Has recibido un informe detallado sobre un evento de seguridad específico. Tu tarea es analizar este informe y generar una \"Novedad\" (reporte de incidente) concisa y estructurada en formato Markdown, siguiendo el modelo visual de tres secciones principales. Debes **extraer directamente los valores** del informe del evento para maximizar la precisión.\n\nInstrucciones Generales:\n1.  **Analiza CUIDADOSAMENTE TODO el informe del evento** proporcionado en la sección \"Contenido del Informe del Evento\".\n2.  **Extrae y sintetiza la información clave** para cada una de las tres secciones definidas.\n3.  **Genera el reporte ejecutivo en formato Markdown**, siguiendo estrictamente la estructura y las reglas especificadas a continuación.\n\n**Formato de Salida (OBLIGATORIO):**\nEl reporte final debe estar en **formato Markdown** y seguir estrictamente la siguiente estructura. NO incluyas ningún texto o encabezado que no esté especificado fuera de la estructura.\n\n---\n\n## Novedades\n\n### Información del Cliente y Evento\n(Sintetiza la información general del incidente y del cliente afectado.)\n\n* **Cliente Afectado:** [Extrae el nombre del cliente del campo \"Cliente\"]\n* **Fecha del Evento:** [Extrae la fecha y hora exacta del evento del campo \"Fecha Creación\" o \"Last Occurred\"]\n* **Nº Ticket:** [Extrae el número de ticket del campo \"Número\"]\n* **Severidad:** [Extrae la severidad del campo \"Severity\"]\n* **Analista:** [Extrae el nombre del responsable del campo \"Responsable\"]\n* **Categoría:** [Extrae la categoría del campo \"Category\"]\n* **Regla Aplicada:** [Extrae el nombre de la regla del campo \"Rule Name\"]\n\n### Detalles del Evento\n(Proporciona los datos técnicos específicos del incidente.)\n\n* **Hostname:** [Extrae el nombre del dispositivo reportado del campo \"Reporting Device\"]\n* **IP de Origen:** [Extrae la dirección IP de origen del campo \"Source IP\"]\n* **Usuario que Realizó la Acción:** [Extrae el nombre del usuario del campo \"User\"]\n* **Dominio:** [Extrae la organización del campo \"Organization\"]\n* **EventID:** [Extrae el Event ID del campo \"Incident Id\"]\n\n### Descripción y Recomendaciones\n(Detalla lo que sucedió, el análisis técnico y las acciones sugeridas.)\n\n**Descripción del Evento:**\n[Genera un párrafo claro y conciso describiendo el evento basándote en \"Incident Title\" y \"Rule Description\". Ejemplo: \"Se ha detectado un intento de inicio de sesión fallido a través de VPN desde la IP [IP] que se encuentra fuera del país configurado en la regla de seguridad...\"]\n\n**Características del Evento:**\n* **EventID:** [Repite el EventID]\n* **Tipo de evento:** [Describe el tipo de evento, ej., \"VPN login fail\" basado en el Raw Event]\n* **Usuario administrador:** N/A\n* **Grupo objetivo:** N/A\n* **Controlador de dominio:** N/A\n* **Security ID del usuario administrador:** N/A\n* **Security ID del nuevo miembro:** N/A\n\n**Análisis Técnico:**\n[Genera un párrafo que explique el \"por qué\" de la detección del evento y su relevancia de seguridad, haciendo referencia a la técnica MITRE (Brute Force) y la repetición de intentos.]\n\n**Evaluación de Riesgo:**\n* **Nivel de riesgo:** [Extrae el nivel de riesgo del campo \"Severity\"]\n* **Factores que contribuyen a esta evaluación:**\n + [Factor 1 extraído de la lógica del incidente, ej., \"Intentos múltiples de inicio de sesión fallido desde la misma IP.\"]\n + [Factor 2 extraído de la lógica del incidente, ej., \"La IP de origen se encuentra fuera del país de la organización.\"]\n + [Factor 3: Si no hay más factores claros, puedes omitir esta línea o usar una conclusión de alto nivel.]\n\n**RECOMENDACIONES:**\n* [Recomendación 1: Investigar la actividad del usuario/IP]\n* [Recomendación 2: Verificar la autenticidad de los intentos]\n* [Recomendación 3: Considerar el bloqueo de la IP 185.196.11.136]\n\n---\n\n**Contenido del Informe del Evento:**\n{{ $json.summary }}","options":{"systemMessage":"You are a helpful assistant"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[384,-16],"id":"b29c36b7-3a5e-4ae3-a87e-69ca76b44f6b","name":"AI Agent"}],"connections":{"Schedule Trigger":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"MapData","type":"main","index":0}]]},"MapData":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Convert to HTML":{"main":[[{"node":"Send Mail","type":"main","index":0}]]},"Find documents":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[],[{"node":"AI Agent","type":"main","index":0}]]},"Insert documents":{"main":[[]]},"AI Agent":{"main":[[{"node":"Convert to HTML","type":"main","index":0},{"node":"Insert documents","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"f06cc79c-1f5f-4505-8dbd-8a1732219ded","triggerCount":0,"shared":[{"createdAt":"2025-09-16T20:26:39.232Z","updatedAt":"2025-09-16T20:26:39.232Z","role":"workflow:owner","workflowId":"FWkAvzzQEbgcToMj","projectId":"f6RX0bgoA61ZNo42"}],"tags":[]}