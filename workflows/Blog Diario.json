{"createdAt":"2025-06-16T15:01:18.710Z","updatedAt":"2025-09-04T17:11:58.000Z","id":"8GoB8H8MKFHQWhSm","name":"Blog Diario","active":false,"isArchived":false,"nodes":[{"parameters":{"queue":"fortisiem","options":{}},"type":"n8n-nodes-base.rabbitmqTrigger","typeVersion":1,"position":[-352,-80],"id":"c9b820b3-64ea-456b-9b45-f6397d244ec6","name":"RabbitMQ Trigger","credentials":{"rabbitmq":{"id":"t9bSCbxjrJcoO2kT","name":"CB - RabbitMQ AIFX"}}},{"parameters":{"jsCode":"// Access the log content from the RabbitMQ node's output\nconst rawData = items[0].json.content;\n\n// Parse the raw data (which is a JSON string) into a JavaScript object\nconst parsedData = JSON.parse(rawData);\n\n// Extract the 'log' field, which contains the raw FortiGate syslog string\nconst syslogString = parsedData.log;\n\n// Use a regular expression to extract key-value pairs from the syslog string\n// This regex captures key=\"value\" or key=value patterns\nconst regex = /(\\w+)=(\".*?\"|.*?)(?=\\s\\w+=|$)/g;\nlet match;\nconst logObject = {};\n\n// Iterate through all matches and build the final object\nwhile ((match = regex.exec(syslogString)) !== null) {\n  const key = match[1];\n  let value = match[2].trim();\n  \n  // Remove surrounding quotes if they exist\n  if (value.startsWith('\"') && value.endsWith('\"')) {\n    value = value.slice(1, -1);\n  }\n  \n  logObject[key] = value;\n}\n\n// Add the original source IP from your Python script to the parsed object\nlogObject.source_ip = parsedData.source_ip;\n\n// Return the new, clean object for the next nodes in the workflow\nreturn [{ json: logObject }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-128,-80],"id":"852fb25c-147d-4d3c-9686-b868cc6b30cc","name":"Code"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5d393fdb-5b3b-463c-bfa3-28ed540d2f84","leftValue":"={{ $json.action }}","rightValue":"'accept'","operator":{"type":"string","operation":"notEquals"}},{"id":"abfacebc-9913-48b0-b6e6-1dcf4a93a6c0","leftValue":"={{ $json.action }}","rightValue":"'traffic'","operator":{"type":"string","operation":"notEquals"}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[64,-80],"id":"39f2c120-acd1-4d5a-879b-71b8ca6aaec7","name":"trafico no aceptado o denegado"},{"parameters":{"operation":"insert","collection":"syslog_Fortisiem","fields":"date, time, devname, devid, type, subtype, level, vd, srcintf","options":{}},"type":"n8n-nodes-base.mongoDb","typeVersion":1.2,"position":[368,-240],"id":"d1249b64-8833-4c19-85a2-a19a660236f9","name":"Insert documents","credentials":{"mongoDb":{"id":"zbcolj89z4clfwzh","name":"CB-MongoDB-Cloud"}}}],"connections":{"RabbitMQ Trigger":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"trafico no aceptado o denegado","type":"main","index":0}]]},"trafico no aceptado o denegado":{"main":[[{"node":"Insert documents","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataSuccessExecution":"all","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"59bcd158-335d-48a5-a5f3-9747049b347a","triggerCount":1,"shared":[{"createdAt":"2025-06-16T15:01:18.715Z","updatedAt":"2025-08-13T15:10:47.000Z","role":"workflow:owner","workflowId":"8GoB8H8MKFHQWhSm","projectId":"f6RX0bgoA61ZNo42"}],"tags":[]}